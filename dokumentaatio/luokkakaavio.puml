@startuml

package cx.corp.lacuna.core.domain {
    interface NativeProcess {
        pid : int
        owner : String
        description : String
    }
    class NativeProcessImpl
    NativeProcess <|.. NativeProcessImpl
}

package cx.corp.lacuna.core {
    interface MemoryReader {
        {abstract} read(NativeProcess, int, int) : byte[]
        {abstract} readBoolean(NativeProcess, int) : boolean
        {abstract} readByte(NativeProcess, int) : byte
        {abstract} readChar(NativeProcess, int) : char
        {abstract} readWChar(NativeProcess, int) : char
        {abstract} readShort(NativeProcess, int) : short
        {abstract} readInt(NativeProcess, int) : int
        {abstract} readFloat(NativeProcess, int) : float
        {abstract} readLong(NativeProcess, int) : long
        {abstract} readDouble(NativeProcess, int) : double
        {abstract} readString(NativeProcess, int, int) : String
        {abstract} readWString(NativeProcess, int, int) : String
    }
    interface NativeProcessEnumerator {
        {abstract} getProcesses() : List<NativeProcess>
    }
    interface NativeProcessCollector {
        {abstract} NativeProcess collect(int)
    }
    interface PidEnumerator {
        {abstract} getPids() : List<Integer>
    }
    interface RawMemoryReader {
        {abstract} read(NativeProcess, int, int) : ByteBuffer
    }
    
    class MemoryReaderImpl
    class NativeProcessEnumeratorImpl
    
    NativeProcessEnumerator <|.. NativeProcessEnumeratorImpl
    NativeProcessEnumeratorImpl --> "1" PidEnumerator
    NativeProcessEnumeratorImpl --> "1" NativeProcessCollector
    
    MemoryReader <|.. MemoryReaderImpl
    MemoryReaderImpl --> "1" RawMemoryReader
    
    RawMemoryReader ..> "1" NativeProcess : uses
    MemoryReader ..>  "1" NativeProcess : uses
    NativeProcessEnumerator ..> "0..*" NativeProcess : creates
    
}

package cx.corp.lacuna.core.windows {

    package cx.corp.lacuna.core.windows.winapi {
        interface Kernel32 {
            {abstract} getProcessId(...) : int
            {abstract} openProcess(...) : int
            {abstract} queryFullProcessImageNameW(...) : boolean
            {abstract} readProcessMemory(...) : boolean
        }
        interface Advapi32 {
            {abstract} openProcessToken(...) : boolean
            {abstract} getTokenInformation(...) : boolean
            {abstract} lookupAccountSidW(...) : boolean
        }
        interface Psapi {
            {abstract} enumProcesses(...) : boolean
        }
    }
    
    interface ProcessDescriptionGetter {
        {abstract} get(ProcessHandle) : Optional<String>
    }
    interface ProcessOwnerGetter {
        {abstract} get(ProcessHandle) : Optional<String>
    }
    interface ProcessHandle <<AutoCloseable>> {
        {abstract} getNativeHandle() : int
    }
    interface ProcessOpener {
        {abstract} open(int, int) : ProcessHandle
    }
    
    class WindowsRawMemoryReader
    class WindowsNativeProcessCollector
    class WindowsPidEnumerator
    
    class WindowsProcessDescriptionGetter
    class WindowsProcessOpener
    class WindowsProcessOwnerGetter
    
    NativeProcessCollector <|.. WindowsNativeProcessCollector
     
    WindowsNativeProcessCollector --> "1" ProcessOpener
    WindowsNativeProcessCollector --> "1" ProcessOwnerGetter
    WindowsNativeProcessCollector --> "1" ProcessDescriptionGetter
    
    ProcessOpener ..> "1" ProcessHandle : creates
    ProcessOwnerGetter ..> "1" ProcessHandle : uses
    ProcessDescriptionGetter ..> "1" ProcessHandle : uses

    PidEnumerator <|.. WindowsPidEnumerator
    WindowsPidEnumerator --> "1" Psapi
    
    ProcessOpener <|.. WindowsProcessOpener
    ProcessOwnerGetter <|.. WindowsProcessOwnerGetter
    ProcessDescriptionGetter <|.. WindowsProcessDescriptionGetter
    
    WindowsProcessOpener --> "1" Kernel32
    WindowsProcessDescriptionGetter --> "1" Kernel32
    WindowsProcessOwnerGetter --> "1" Advapi32
    
    RawMemoryReader <|.. WindowsRawMemoryReader
    WindowsRawMemoryReader --> "1" Kernel32
	WindowsRawMemoryReader --> "1" ProcessOpener
}

package cx.corp.lacuna.core.linux {
    interface MemoryProvider {
        {abstract} open(int) : InputStream
    }
    class LinuxNativeProcessCollector
    class LinuxPidEnumerator
    class LinuxRawMemoryReader
    class ProcPathFilter
    class FileMemoryProvider
    
    NativeProcessCollector <|.. LinuxNativeProcessCollector
    PidEnumerator <|.. LinuxPidEnumerator
    
    LinuxPidEnumerator *-- ProcPathFilter
    
    MemoryProvider <|.. FileMemoryProvider
    
    RawMemoryReader <|.. LinuxRawMemoryReader
    LinuxRawMemoryReader --> "1" MemoryProvider
}

@enduml
